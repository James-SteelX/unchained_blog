SELECT * FROM pepps;
SELECT * FROM peeps;
\q
\c chitter_development
SELECT * FROM peeps;
\q
\c chitter_development
\dt
select * from peeps;
INSERT INTO peeps [(peep_text ["TEST"])]
;
INSERT INTO peeps VALUES ("TEST", 20:15);
INSERT INTO peeps VALUES ("TEST");
INSERT INTO peeps (peept_text) VALUES ("TEST");
INSERT INTO peeps (peep_text) VALUES ("TEST");
INSERT INTO peeps (peep_text) VALUES ('test');
INSERT INTO peeps (peep_text, user_id) VALUES ('test', 1);
SELECT * FROM peeps;
INSERT INTO peeps (peep_text, user_id) VALUES ('OHMY MY GOD PLEASE WORK', 2);
SELECT * FROM peeps;
select * from users;
\q
\c chiiter_development
\c chitter_development
SELECT * FROM peeps
;
\q
\c chitter_development
\dt
SELECT * FROM peeps;
SELECT * FROM peeps;
SELECT * FROM users;
SELECT * FROM peeps;
\q
\c chitter_development
SELECT * FROM peeps;
SELECT * FROM peeps;
\q
\q
\c chitter_development
\dt
SELECT * FROM users;
SELECT * FROM peeps;
SELECT * FROM users;
DROP DATABASE chitter_test;
DROP DATABASE chitter_development;
\q
DROP DATABASE chitter_development;
DROP DATABASE chitter_development;
CREATE DATABAse chitter_development
;
CREATE DATABAse chitter_test;
\c chitter_development
\dt
\q
\c chitter_development
\dt
SELECT * FROM peeps;
\q
\q
\c chitter_test
\dt
SELECT * FROM users;
\q
\c chitter_test
\dt
SELECT * FROM users;
\q
CREATE DATABASE makersbnb_development;
CREATE DATABASE makersbnb_test;
\c makersbnb_test
\dt
\q
\c makersbnb_test
\dt
\q
\c makersbnb_test
\dt
\q
\c makersbnb_test
\dt
\q
\c makersbnd_test
\c makersbnb_test;
\dt
\q
\c makersbnb_development
\dt
\q
\c makersbnb_development
\dt
SELECT * from users;
\q
\c makersbnb_development
\dt
SELECT * FROM requests;
\q
\c makersbnb_development
SELECT * FROM requests;
SELECT * FROM requests;
SELECT * FROM requests;
SELECT * FROM requests;
SELECT * FROM requests;
\q
\c makersbnb_development
SELECT * FROM requests;
\q
\c makersbnb_development
SELECT * FROM requests;
SELECT * FROM requests;
SELECT * FROM requests;
\q
/q
\q
\c makersbnb_test
\dt
SELECT * FROM listings;
\q
\c makersbnb_development
select * from REQUESTS;
truncate requests;
\q
\c makersbnb_test
SELECT * FROM USERS;
SELECT * FROM REQUESTS;
\q
\c makersbnb_development
SELECT * FROM listings;
SELECT * FROM REQUESTS;
select * from requests
;
\q
\c makersbnb_development
elect * from requests;
select * from requests;
\q
\c makersbnb_development;
\dt
drop table avdates;
\dt
select * from requests;
\q
\dt
\c yelp_clone_development;
\dt
SELECT * FROM schema_migrations;
\q
DROP yelp_clone_development;
DROP DATABASE yelp_clone_development;
DROP DATABASE yelp_clone_development_test;
\q
\c yelp_clone_development
\dt
\q
\c yelp_clone_development
\dt
\q
\c yelp_clone_development
\dt
select * from reviews;
\q
\c yelp_clone_development
select * from users;
\q
drop database yelp_clone_development
\q
\c yelp_clone_development
\q
drop database yelp_clone_development;
\q
\c yelp_clone_development
\q
drop database yelp_clone_development;
\q
drop database yelp_clone_development;
drop database yelp_clone_development;
\q
\c yelp_clone_development
select * from reviews;
select * from users;
select * from restaurants;
\q
\c yelp_clone_development
select * from users;
select * from restaurants;
\q
\c yelp_clone_development
select * from reviews;
select * from restaurants;
\q
\c yelp_clone_development
select * from reviews;
\q
\c yelp_clone_development
select * from restaurants;
\q
\q
\c yelp_clone_development
select * from restaurants;
\c
\q
\c yelp_clone_development
select * from users;
\q
\c yelp_clone_development
select * from restaurants;
select * from reviews;
select * from reviews;
select * from restaurants;
select * from restaurants;
\q
\c yelp_clone_development
select * from restaurants;
drop database yelp_clone_development
;
drop database yelp_clone_development
;
drop database yelp_clone_development
;
\q
drop database yelp_clone_development
;
drop database yelp_clone_test
;
\q
drop database yelp_clone_development;
drop database yelp_clone_test;
\q
drop database yelp_clone_test;
drop database yelp_clone_development;
drop database yelp_clone_development;
\q
\c yelp_clone_development;
select * from reviews;
\q
\c yelp_clone_development;
\l
\dt
\q
\c yelp_clone_development
;
\dt
\q
\c yelp_clone_development
select * from reviewed_restaurants;
select * from reviewed_restaurants
;
\q
\c yelp_clone_development
\dt
\q
\c yelp_clone_development;
select * from reviewed_restaurants
;
select * from reviewed_restaurants
;
select * from reviewed_restaurants
;
select * from reviewed_restaurants
;
select * from reviewed_restaurants
;
select * from reviewed_restaurants
;
select * from users;
select * from reviews;
select * from users;
\q
\dt
\c instagram-challenge_development
\dt
select * from photos;
\q
\instagram-challenge_development
\cinstagram-challenge_development
\c instagram-challenge_development
select * from photos;
select * from photos;
\q
\c instagram-challenge_development
select * from photos;
\q
\c instagram-challenge_development;
select * from photos;
\dt
select * from comments;
\q
\c instagram-challenge_development;
select * from comments;
\q
\c instagram-challenge_development
\c
\uc
\q
drop database instagram-challenge_development;
drop database instagram-challenge_development;
drop database 
instagram-challenge_development;
\dt
\c instagram-challenge_development;
\dt
\q
drop database instagram-challenge_development;
drop database "instagram-challenge_development";
drop database "instagram-challenge_development";
\q
drop database "instagram-challenge_test";
\q
\instagram-challenge_development;
\cinstagram-challenge_development;
\c instagram-challenge_development;
\dt
\q
\c instagram-challenge_development
\dt
select * from reactions;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
\q
drop database instagram-challenge_development
;
drop database instagram-challenge_development
;
\q
\dt
\l
drop database "instagram-challenge_development";
\l
drop database "instagram-challenge_test";
\s
\q
\l
\q
\c instagram-challege_development
\l
\c instagram-challege_development
\q
\c instagram-challenge_development
select * from comments;
select * from comments;
select * from comments;
\q
drop database "instagram-challenge_development";
drop database "instagram-challenge_test";
drop database "instagram-challenge_test";\q
\c instagram-challenge_development;
\dt
\q
\c instagram-challenge_development;
\dt
\q
\c instagram-challenge_development;
select * from comments;
select * from comments;
\dt
\q
\c instagram-challenge_development;
select * from comments;
\q
\c instagram-challenge_development;
select * from comments;
select * from comments;
select * from comments;
select * from reactions;
select * from reactions;
select * from reactions;
select * from reactions;
\dt
select * from users;
select * from photos;
select * from photos;
select * from photos;
select * from users;
select * from comments;
select * from comments;
select * from photos;
select * from reactions;
select * from comments;
select * from comments;
select * from comments;
select * from comments;
select * from users;
\q
drop database "instagram-clone_development";
\dt
\l
drop database "instagram-challenge_development";
drop database "instagram-challenge_test";
\q
pgsql-admin by date
pgsql-admin by date;
\du
\q
\l
CREATE DATABASE unchained_blog OWNER liam.taylor;
\du
CREATE DATABASE unchained_blog_development OWNER liam.taylor;
CREATE DATABASE unchained_blog_development;
CREATE DATABASE unchained_blog_test;
\dt
\l
\q
\c unchained_blog_development
\dt
\c unchained_blog_test
\dt
\q
\c unchained_blog_test
\dt
\q
\c unchained_blog_test
\dt
\q
\c unchained_blog_development
\l
\dt
\q
\c unchained_blog_development
\dt
select * from blog_post;
\q
\c unchained_blog_development
\l
\dt
q
\q
\c unchained_blog_development
\dt
select * from auth_user;
\q
\c unchained_blog_development
\dt
select * auth_user
;
select * from auth_user;
\q
drop database unchained_blog_development;
drop database unchained_blog_development;
drop database unchained_blog_test;
create database unchained_blog_development;
create database unchained_blog_test;
\q
\c unchained_blog_development;
\dt
\q
\c unchained_blog_development;
\dt
\q
\c unchained_blog_developmentl
\c unchained_blog_development;
select * from posts;
select * from posts;
\dt;
select * from blog_post;
delete * from blog_post;
truncate blog_post;
select * from blog_post
;
\q
\c unchained_blog_development;
select * from blog_comment;
\q
\c unchained_blog_development;
select * from blog_post
;
\q
\q
\c unchained_blog_development;
select * from blog_comment;
\q
\c unchained_blog_development;
select * from auth_user;
\q
select * from blog_comment;
\c unchained_blog_development;
select * from blog_comment;
select * from auth_user
;
select * from auth_user
;
\q
select * from blog_post;
select * from blog_post;
\dt
\c unchained_blog_development;
select * from blog_post;
select * from blog_comment;
select * from blog_post;
select * from blog_comment;
select * from blog_post;
\q
\l
\c unchained_blog_test;
select * from blog_post;
\dt
select * from blog_post;
\c unchained_blog_development;
select * from blog_post;
select * from blog_comment;
select * from auth_user;
select * from blog_comment;
select * from auth_user;
select * from upvote;
\dt
select * from nlog_upvote;
select * from blog_upvote;
truncate blog_post;
truncate blog_post cascade;
select * from blog_comment;
select * from blog_comment;
select * from blog_post;
select * from blog_upvote;
\q
drop database unchained_blog_development;
\q
create database unchained_blog_development;
\s unchained_blog_development;
